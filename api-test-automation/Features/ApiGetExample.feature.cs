// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.0.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiTestAutomation.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Example API Testing")]
    public partial class ExampleAPITestingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ApiGetExample.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Example API Testing", "       In order to learning about API Testing\r\n       As a testing analyst\r\n     " +
                    "  I want to see result of get", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Get - Testing status code")]
        public virtual void SimpleGet_TestingStatusCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Get - Testing status code", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
       testRunner.Given("a collection of posts exposed as api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
       testRunner.When("I request post with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
       testRunner.Then("response StatusCode is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Get - Testing value")]
        public virtual void SimpleGet_TestingValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Get - Testing value", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
       testRunner.Given("a collection of posts exposed as api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
       testRunner.When("I request post with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 15
    testRunner.Then("response StatusCode is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 16
       testRunner.Then("response content is composed by title with value \"sunt aut facere repellat provid" +
                    "ent occaecati excepturi optio reprehenderit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
       testRunner.And("response content is composed by id with value 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
       testRunner.And("response content is composed by userId with value \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
       testRunner.And("response content is composed by body with value \"quia et suscipit suscipit recusa" +
                    "ndae consequuntur expedita et cum reprehenderit molestiae ut ut quas totam nostr" +
                    "um rerum est autem sunt rem eveniet architecto\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Simple Get - Testing FakeResponse")]
        public virtual void SimpleGet_TestingFakeResponse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple Get - Testing FakeResponse", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
       testRunner.Given("a collection of posts exposed as api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
       testRunner.When("I request post with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
       testRunner.Then("response StatusCode is Ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
    testRunner.And("response content is composed by all fields with value 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
